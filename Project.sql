-- CREATE DATABASE GRADEBOOK;
USE GRADEBOOK;

-- TASK 2
DROP TABLE IF EXISTS COURSE_ASSIGNMENT;
DROP TABLE IF EXISTS COURSE_GRADE_CATEGORY;
DROP TABLE IF EXISTS STUDENT;
DROP TABLE IF EXISTS COURSE;
DROP TABLE IF EXISTS GRADING_CATEGORY;

CREATE TABLE STUDENT(
STUDENT_ID int not null PRIMARY KEY,
STUDENT_FNAME varchar(255),
STUDENT_LNAME varchar(255),
STUDENT_INITIALS varchar(255)
);

CREATE TABLE COURSE(
COURSE_NUM int not null PRIMARY KEY,
COURSE_NAME varchar(255),
COURSE_SEMESTER varchar(10),
COURSE_YEAR int,
COURSE_DEPT varchar(255)
);

CREATE TABLE GRADING_CATEGORY(
CATEGORY_ID int not null PRIMARY KEY,
CATEGORY_NAME varchar(255)
);

CREATE TABLE COURSE_GRADE_CATEGORY(
COURSE_NUM int not null,
CATEGORY_ID int not null,
GRADING_WEIGHT int,
PRIMARY KEY (COURSE_NUM, CATEGORY_ID),
FOREIGN KEY (COURSE_NUM) REFERENCES COURSE(COURSE_NUM) ON DELETE CASCADE,
FOREIGN KEY (CATEGORY_ID) REFERENCES GRADING_CATEGORY(CATEGORY_ID) ON DELETE CASCADE
);


CREATE TABLE COURSE_ASSIGNMENT(
COURSE_NUM int not null,
STUDENT_ID int not null,
CATEGORY_ID int not null,
ASSIGNMENT_ID int not null,
ASSIGNMENT_SCORE int DEFAULT 0,
PRIMARY KEY(COURSE_NUM, STUDENT_ID, CATEGORY_ID, ASSIGNMENT_ID),
FOREIGN KEY (COURSE_NUM) REFERENCES COURSE(COURSE_NUM )ON DELETE CASCADE,
FOREIGN KEY (CATEGORY_ID) REFERENCES GRADING_CATEGORY(CATEGORY_ID) ON DELETE CASCADE,
FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(STUDENT_ID) ON DELETE CASCADE
);

INSERT INTO STUDENT(STUDENT_ID,STUDENT_FNAME,STUDENT_LNAME, STUDENT_INITIALS) VALUES (1, 'Richard', 'Hendricks', 'RH');
INSERT INTO STUDENT(STUDENT_ID,STUDENT_FNAME,STUDENT_LNAME, STUDENT_INITIALS) VALUES (2, 'Jared', 'Dunn', 'JD');
INSERT INTO STUDENT(STUDENT_ID,STUDENT_FNAME,STUDENT_LNAME, STUDENT_INITIALS) VALUES (3, 'Erlich', 'Bachman', 'EB');
INSERT INTO STUDENT(STUDENT_ID,STUDENT_FNAME,STUDENT_LNAME, STUDENT_INITIALS) VALUES (4, 'Jimmy', 'Quoyang', 'JQ');
INSERT INTO STUDENT(STUDENT_ID,STUDENT_FNAME,STUDENT_LNAME, STUDENT_INITIALS) VALUES (5, 'Dinesh', 'Gilfoyle', 'DG');
INSERT INTO STUDENT(STUDENT_ID,STUDENT_FNAME,STUDENT_LNAME, STUDENT_INITIALS) VALUES (6, 'John', 'Doe', 'JD');

INSERT INTO COURSE VALUES(81921,'Programming Languages','Spring', 2020,'Computer Science');
INSERT INTO COURSE VALUES(85675,'Calculus II', 'Fall', 2019, 'Mathematics');
INSERT INTO COURSE VALUES(56738,'Technical Writing', 'Fall', 2019, 'English');
INSERT INTO COURSE VALUES(48387, 'Mechanics', 'Fall', 2019, 'Physics');
INSERT INTO COURSE VALUES(12345, 'Database Systems', 'Spring', 2020, 'Computer Science');

INSERT INTO GRADING_CATEGORY VALUES(1,'Homework');
INSERT INTO GRADING_CATEGORY VALUES(2,'Project');
INSERT INTO GRADING_CATEGORY VALUES(3,'Class Participation');
INSERT INTO GRADING_CATEGORY VALUES(4,'Test');

INSERT INTO COURSE_GRADE_CATEGORY VALUES(81921,1,40);
INSERT INTO COURSE_GRADE_CATEGORY VALUES(81921,2,20);
INSERT INTO COURSE_GRADE_CATEGORY VALUES(81921,4,40);
INSERT INTO COURSE_GRADE_CATEGORY VALUES(85675,1,10);
INSERT INTO COURSE_GRADE_CATEGORY VALUES(85675,3,40);
INSERT INTO COURSE_GRADE_CATEGORY VALUES(85675,2,50);
INSERT INTO COURSE_GRADE_CATEGORY VALUES(56738,1,20);
INSERT INTO COURSE_GRADE_CATEGORY VALUES(56738,3,20);
INSERT INTO COURSE_GRADE_CATEGORY VALUES(56738,4,60);
INSERT INTO COURSE_GRADE_CATEGORY VALUES(12345,1,20);
INSERT INTO COURSE_GRADE_CATEGORY VALUES(12345,2,20);
INSERT INTO COURSE_GRADE_CATEGORY VALUES(12345,4,60);

INSERT INTO COURSE_ASSIGNMENT VALUES(81921,1,1,1,90);
INSERT INTO COURSE_ASSIGNMENT VALUES(81921,2,1,1,60);
INSERT INTO COURSE_ASSIGNMENT VALUES(81921,3,1,1,70);
INSERT INTO COURSE_ASSIGNMENT VALUES(81921,4,1,1,40);
INSERT INTO COURSE_ASSIGNMENT VALUES(85675,1,1,2,90);
INSERT INTO COURSE_ASSIGNMENT VALUES(85675,2,1,2,60);
INSERT INTO COURSE_ASSIGNMENT VALUES(85675,5,1,1,70);
INSERT INTO COURSE_ASSIGNMENT VALUES(12345,5,1,1,40);
INSERT INTO COURSE_ASSIGNMENT VALUES(12345,5,2,1,90);
INSERT INTO COURSE_ASSIGNMENT VALUES(12345,5,3,1,100);
INSERT INTO COURSE_ASSIGNMENT VALUES(12345,6,1,1,75);
INSERT INTO COURSE_ASSIGNMENT VALUES(12345,6,2,1,100);
INSERT INTO COURSE_ASSIGNMENT VALUES(12345,6,4,1,95);
INSERT INTO COURSE_ASSIGNMENT VALUES(12345,5,1,2,100);
INSERT INTO COURSE_ASSIGNMENT VALUES(12345,5,1,3,90);
INSERT INTO COURSE_ASSIGNMENT VALUES(12345,5,1,4,100);
INSERT INTO COURSE_ASSIGNMENT VALUES(12345,6,1,2,100);
INSERT INTO COURSE_ASSIGNMENT VALUES(12345,6,1,3,100);
INSERT INTO COURSE_ASSIGNMENT VALUES(12345,6,1,4,95);
INSERT INTO COURSE_ASSIGNMENT VALUES(12345,5,4,1,90);

/* TASK 4
DECLARE @CourseNum int = 12345;
DECLARE @Categoryid int = 1;
DECLARE @AssignmentId int = 1;
SELECT MAX(COURSE_ASSIGNMENT.ASSIGNMENT_SCORE) as MaxScore,MIN(COURSE_ASSIGNMENT.ASSIGNMENT_SCORE) as MinScore,AVG(COURSE_ASSIGNMENT.ASSIGNMENT_SCORE) as AVGScore FROM COURSE_ASSIGNMENT WHERE COURSE_ASSIGNMENT.COURSE_NUM=@CourseNum AND COURSE_ASSIGNMENT.CATEGORY_ID=@CategoryId AND ASSIGNMENT_ID =@AssignmentId GROUP BY ASSIGNMENT_ID
*/

/* TASK 5
DECLARE @CourseNum int = 81921;
SELECT DISTINCT STUDENT.STUDENT_FNAME, STUDENT.STUDENT_LNAME, COURSE_ASSIGNMENT.STUDENT_ID FROM COURSE_ASSIGNMENT INNER JOIN STUDENT ON STUDENT.STUDENT_ID = COURSE_ASSIGNMENT.STUDENT_ID WHERE COURSE_NUM = @CourseNum 
*/

/* TASK 6
DECLARE @CourseNum int = 12345; 
SELECT STUDENT.STUDENT_ID, STUDENT.STUDENT_FNAME, STUDENT.STUDENT_LNAME, GRADING_CATEGORY.CATEGORY_NAME, COURSE_ASSIGNMENT.ASSIGNMENT_ID, COURSE_ASSIGNMENT.ASSIGNMENT_SCORE FROM (COURSE_ASSIGNMENT INNER JOIN STUDENT ON COURSE_ASSIGNMENT.STUDENT_ID = STUDENT.STUDENT_ID) INNER JOIN GRADING_CATEGORY ON GRADING_CATEGORY.CATEGORY_ID = COURSE_ASSIGNMENT.CATEGORY_ID WHERE COURSE_NUM = @CourseNum
*/

/* TASK 7
DECLARE @CourseNum int = 12345;
DECLARE @StudentId int = 6;
DECLARE @CategoryId int = 1;
DECLARE @AssignmentId int =5; 
DECLARE @Score int = 95;
INSERT INTO COURSE_ASSIGNMENT VALUES(@CourseNum,@StudentId,@CategoryId,@ASssignmentId,@Score);
*/

/* TASK 8
DECLARE @CourseNum int = 12345;
DECLARE @CategoryId int = 2;
DECLARE @NewWeight int = 15;
UPDATE COURSE_GRADE_CATEGORY
SET GRADING_WEIGHT = @NewWeight
WHERE COURSE_NUM = @CourseNum AND CATEGORY_ID = @CategoryId
*/

/* TASK 9
DECLARE @CourseNum int = 12345;
DECLARE @CategoryId int = 2;
DECLARE @AssignmentId int = 1;
UPDATE COURSE_ASSIGNMENT
SET ASSIGNMENT_SCORE = ASSIGNMENT_SCORE + 2
WHERE COURSE_NUM = @CourseNum AND CATEGORY_ID = @CategoryId AND ASSIGNMENT_ID = @AssignmentId
*/

/* TASK 10
DECLARE @CourseNum int = 81921;
DECLARE @CategoryId int = 2;
DECLARE @AssignmentId int = 1;
UPDATE COURSE_ASSIGNMENT
SET ASSIGNMENT_SCORE = ASSIGNMENT_SCORE + 2
FROM STUDENT INNER JOIN COURSE_ASSIGNMENT ON STUDENT.STUDENT_ID = COURSE_ASSIGNMENT.STUDENT_ID WHERE COURSE_NUM = @CourseNum AND CATEGORY_ID = @CategoryId AND ASSIGNMENT_ID = @AssignmentId AND (STUDENT.STUDENT_LNAME like '%q%' OR STUDENT.STUDENT_LNAME like '%Q%')
*/


/* TASK 11
DECLARE @CategoryId int;
DECLARE @Grade float= 0;
DECLARE @CourseNum int = 12345;
DECLARE @StudentId int = 5;
DECLARE MY_CURSOR CURSOR 
  LOCAL STATIC READ_ONLY FORWARD_ONLY
FOR 
SELECT DISTINCT COURSE_GRADE_CATEGORY.CATEGORY_ID 
FROM COURSE_GRADE_CATEGORY WHERE COURSE_NUM = @CourseNum

OPEN MY_CURSOR
FETCH NEXT FROM MY_CURSOR INTO @CategoryId
WHILE @@FETCH_STATUS = 0
BEGIN
    SET @Grade = @Grade + (SELECT (SELECT AVG(COURSE_ASSIGNMENT.ASSIGNMENT_SCORE) FROM COURSE_ASSIGNMENT WHERE COURSE_NUM = @CourseNum AND STUDENT_ID = @StudentId AND CATEGORY_ID = @CategoryId) / CAST(100 AS float) * (SELECT COURSE_GRADE_CATEGORY.GRADING_WEIGHT FROM COURSE_GRADE_CATEGORY WHERE COURSE_GRADE_CATEGORY.CATEGORY_ID = @CategoryId AND COURSE_GRADE_CATEGORY.COURSE_NUM = @CourseNum))
	FETCH NEXT FROM MY_CURSOR INTO @CategoryId
END
SELECT @StudentId as StudentID, @Grade as Grade
CLOSE MY_CURSOR
DEALLOCATE MY_CURSOR
*/


/* TASK 12
DECLARE @CategoryId int;
DECLARE @Grade float= 0;
DECLARE @CourseNum int = 12345;
DECLARE @StudentId int = 5;
DECLARE @GivenCategory int = 1;
DECLARE MY_CURSOR CURSOR 
  LOCAL STATIC READ_ONLY FORWARD_ONLY
FOR 
SELECT DISTINCT COURSE_GRADE_CATEGORY.CATEGORY_ID 
FROM COURSE_GRADE_CATEGORY WHERE COURSE_NUM = @CourseNum

OPEN MY_CURSOR
FETCH NEXT FROM MY_CURSOR INTO @CategoryId
WHILE @@FETCH_STATUS = 0
BEGIN
	IF (@CategoryId = @GivenCategory)
		SET @Grade = @Grade + (SELECT((SELECT (SELECT AVG(st.ASSIGNMENT_SCORE)
								FROM (SELECT COURSE_ASSIGNMENT.ASSIGNMENT_SCORE 
								FROM COURSE_ASSIGNMENT 
								WHERE COURSE_NUM = @CourseNum AND STUDENT_ID = @StudentId AND CATEGORY_ID = @CategoryId 
								AND ASSIGNMENT_SCORE > (SELECT MIN(COURSE_ASSIGNMENT.ASSIGNMENT_SCORE) FROM COURSE_ASSIGNMENT WHERE COURSE_NUM = @CourseNum AND STUDENT_ID = @StudentId AND CATEGORY_ID = @CategoryId))st)))/ CAST(100 AS float) * (SELECT COURSE_GRADE_CATEGORY.GRADING_WEIGHT FROM COURSE_GRADE_CATEGORY WHERE COURSE_GRADE_CATEGORY.CATEGORY_ID = @CategoryId AND COURSE_GRADE_CATEGORY.COURSE_NUM = @CourseNum))
	ELSE
		SET @Grade = @Grade + (SELECT (SELECT AVG(COURSE_ASSIGNMENT.ASSIGNMENT_SCORE) FROM COURSE_ASSIGNMENT WHERE COURSE_NUM = @CourseNum AND STUDENT_ID = @StudentId AND CATEGORY_ID = @CategoryId) / CAST(100 AS float) * (SELECT COURSE_GRADE_CATEGORY.GRADING_WEIGHT FROM COURSE_GRADE_CATEGORY WHERE COURSE_GRADE_CATEGORY.CATEGORY_ID = @CategoryId AND COURSE_GRADE_CATEGORY.COURSE_NUM = @CourseNum))
	FETCH NEXT FROM MY_CURSOR INTO @CategoryId
END
SELECT @StudentId as StudentID, @Grade as Grade
CLOSE MY_CURSOR
DEALLOCATE MY_CURSOR
*/